-Break up each array element into sub blocks to store on a stack.
-For each subsequent array element, check, if there are existing blocks on the stack, that can be used to create. 
-Add a new block to the stack, when it is not possible to re-use the sub-blocks from the stack

H={8,8,5,7,9,8,7,4,8}
(0,8)//8
(0,8)//8
(0,5)//5
after clearing the stack
(0,5),(5,7)//7
(0,5),(5,7),(7,9)//9
(0,5),(5,7),(7,8)//8 (after popping stack)
(0,5),(5,7)//7(after popping stack)
(0,4)//4 (after clearing stack)
(0,4),(4,8) //8


//Stonewall

public int solution(int[]H)
{
int L=H.Length;
int stones=0;
int[] wall= new int[L];
int wallnum=0;

for(int i=0;i<L;i++)
{
while (wallnum >0 && wall[wallnum - 1]>H[i])
wallnum -= 1;
if(wallnum>0 && wall[wallnum -1]==H[i])
continue;
else
{
stones+=1;
wall[wallnum]=H[i];
wallnum +=1;
}
}
return stones;
}


