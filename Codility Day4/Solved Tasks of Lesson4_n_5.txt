//Missing Integer
1.

public int solution(int[]A)
{
Array.Sort(A);
int res=0;
for(int i=0; i<A.length;i++)
{
if(A[i]>res+1)
{
return res+1;
}
res=A[i]>res ? A[i]:res;
}
return res+1;
}
}

2 approach

 A=A.Where(a=> a>0).Distinct().OrderBy(c=>c).ToArray();

if(A.length==0)
{
return 1;
}
for(int i=0; i<A.Length;i++)
{
if(i+1 !=A[i])
{
return i+1;
}
}
return A.Max()+1;
}

//PermCheck
approach 1:

public int solution(int[]A)
{
   int N=A.Length;
   if(N==0)
   return 0;
   int[]count=new int[N];
   for(int i=0; i<A.Length;i++)
   {
      if(A[i]>=1 && A[i]<=N)
      {
        if(count[A[i] -1]==0)
        count(A[i] -1]+=1;
        else
        return 0;
      }
      else
      return 0;
   }
return 1;
}

//countDiv

1. public int solution(int A,int B, int K)
{
if(A%K!=0)
A+=K-(A%K);
if(B%K!=0)
B-=B%K;
return ((B-A)/K)+1;
}

2nd approach

int exists=0;
if(A%K==0)
{
exists+=1;
}
return(B/K)-(A/K)+exists;

//MinAvgSlice  2 or 3 elements slice alone we will do

    A[0] = 4
    A[1] = -2
    A[2] = 2
    A[3] = 5
    A[4] = 1
    A[5] = -5
    A[6] = 8

public int solution(int[]A)
{
int minI=0;
double minvalue=100001.0;  (average of any one set of a slice)
for(int i=0;i<A.Length-1;i++)
{
if(((A[i]+A[i+1])/2.0)<minvalue)
minI=i;
minvalue=(A[i]+A[i+1])/2.0;
}
if(i<A.length-2)
{
if(((A[i]+A[i+1]+A[i+2])/3.0)<minvalue)
{
minI=i;
minvalue=)A[i]+A[i+1]+A[i+2])/3.0;
}
}
}
return minI;


//GenomicRangeQuery

public int[] solution(string S, int[]P, int[]Q)
{
var nucleo=new int[S.Length +1,4];
for(var count=0;count<S.Length;count++)
{
if(count>0)
{
for(var index=0;index<4;index++)
{
nucleo[count +1,index]+=nucleo[count,index];
}
}
switch (S[count])
{
case 'A':
nucleo[count+1,0]++;
break;
case 'C':
nucleo[count+1,1]++;
break;
case 'G':
nucleo[count+1,2]++;
break;
case 'T':
nucleo[count+1,3]++;
break;
}
var result=new int[P.Length];
for(var count=0;count<P.Length;count++)
{
if(P[count]==Q[count])
{
switch (S[P[count]])
{
case 'A':
result[count]=1;
break;
case 'C':
result[count]=2;
break;
case 'G':
result[count]=3;
break;
case 'T':
result[count]=4;
break;
}
else
{
for(var index=0;index<4;index++)
{
if((nucleo[Q[count]+1,index]-nucleo[P[count],index])>0)
{
result[count]=index+1;
break;
}
}
}
}


